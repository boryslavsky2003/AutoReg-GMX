"""
–ö—Ä–∞—Å–∏–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è GMX –∞–≤—Ç–æ—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
"""

import logging
import sys
from typing import Dict, Any


class ColorFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–µ—Ä –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ"""

    # ANSI –∫–æ–¥–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
    COLORS = {
        "DEBUG": "\033[36m",  # Cyan
        "INFO": "\033[32m",  # Green
        "WARNING": "\033[33m",  # Yellow
        "ERROR": "\033[31m",  # Red
        "CRITICAL": "\033[35m",  # Magenta
        "RESET": "\033[0m",  # Reset
    }

    def format(self, record):
        # –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        color = self.COLORS.get(record.levelname, self.COLORS["RESET"])
        reset = self.COLORS["RESET"]

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
        formatted_time = self.formatTime(record, "%H:%M:%S")

        # –°–∫–æ—Ä–æ—á—É—î–º–æ –Ω–∞–∑–≤—É –ª–æ–≥–µ—Ä–∞ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        logger_name = record.name
        if logger_name.startswith("app."):
            logger_name = logger_name.replace("app.automation.", "")
            logger_name = logger_name.replace("app.", "")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        formatted_msg = f"{color}{formatted_time} | {record.levelname:^8} | {logger_name:20} | {record.getMessage()}{reset}"

        return formatted_msg


def setup_logging() -> None:
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫—Ä–∞—Å–∏–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è–º –∑–∞–π–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –ª–æ–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    # –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–º
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(ColorFormatter())

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –ª–æ–≥–µ—Ä–∞
    root_logger.addHandler(console_handler)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    logging_levels = {
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–π–≤—ñ selenium-wire –ª–æ–≥–∏
        "seleniumwire.handler": logging.WARNING,
        "seleniumwire.server": logging.WARNING,
        "seleniumwire.capture": logging.WARNING,
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–π–≤—ñ urllib3 –ª–æ–≥–∏
        "urllib3.connectionpool": logging.WARNING,
        "urllib3.util.retry": logging.WARNING,
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–π–≤—ñ selenium –ª–æ–≥–∏
        "selenium.webdriver.remote.remote_connection": logging.WARNING,
        "selenium.webdriver.common.selenium_manager": logging.WARNING,
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –ª–æ–≥–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
        "app": logging.INFO,
        "app.automation": logging.INFO,
        "app.automation.gmx_registration_page": logging.INFO,
        "app.automation.registration_service": logging.INFO,
        # –ö–æ—Ä–µ–Ω–µ–≤–∏–π –ª–æ–≥–µ—Ä
        "": logging.INFO,
    }

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    for logger_name, level in logging_levels.items():
        logging.getLogger(logger_name).setLevel(level)

    print("üé® –ö—Ä–∞—Å–∏–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
    print("=" * 80)


def log_section_start(title: str, emoji: str = "üî•") -> None:
    """–í–∏–≤–æ–¥–∏—Ç—å –∫—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó"""
    print("\n" + "=" * 80)
    print(f"{emoji} {title}")
    print("=" * 80)


def log_section_end(title: str = "", success: bool = True) -> None:
    """–í–∏–≤–æ–¥–∏—Ç—å –∫—ñ–Ω–µ—Ü—å —Å–µ–∫—Ü—ñ—ó"""
    emoji = "‚úÖ" if success else "‚ùå"
    status = "COMPLETED" if success else "FAILED"

    print("=" * 80)
    if title:
        print(f"{emoji} {title} - {status}")
    else:
        print(f"{emoji} SECTION {status}")
    print("=" * 80 + "\n")


def log_progress_bar(
    current: int,
    total: int,
    prefix: str = "Progress",
    suffix: str = "Complete",
    length: int = 50,
) -> str:
    """–°—Ç–≤–æ—Ä—é—î ASCII –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    percent = f"{100 * (current / float(total)):.1f}"
    filled_length = int(length * current // total)
    bar = "‚ñà" * filled_length + "‚ñë" * (length - filled_length)

    return f"\r{prefix} |{bar}| {percent}% {suffix}"


# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = ["setup_logging", "log_section_start", "log_section_end", "log_progress_bar"]
